<?php
/**
 * Created by PhpStorm.
 * User: ThinkPad
 * Date: 2018/9/7
 * Time: 17:10
 */

namespace App\HttpController\Api;


use App\Utility\FormatResultErrors;

class Project extends Base
{
    public function index()
    {
        parent::index(); // TODO: Change the autogenerated stub
    }

    public function store()
    {
        if($verfy_result = $this->verificationMethod('POST') !== true){
            $this->returnJson($verfy_result);
        }
        $rule = new Rules();
        $rule->add('name','name字段错误')->withRule(Rule::REQUIRED)
            ->withRule(Rule::MIN_LEN,3)
            ->withRule(Rule::MAX_LEN,60);
        $rule->add('subordinate','subordinate')->withRule(Rule::REQUIRED)
            ->withRule(Rule::MIN_LEN,6)
            ->withRule(Rule::MAX_LEN,30);

        $v = $this->validateParams($rule);
        if(!$v->hasError()){
            $project_name = $this->request()->getRequestParam('name');
            $subordinate = $this->request()->getRequestParam('subordinate');

            if(!in_array($subordinate, \App\Model\Project::SUBORDINATE)){
                return $this->returnJson(FormatResultErrors::CODE_MAP['SUBORDINATE.INVALID']);
            }

            $project = new \App\Model\Project();
            $project->name = $project_name;
            $project->subordinate = $subordinate;
            $project->id_user_create = $this->who->id_user;
            $project->save();

            return $this->returnJson(FormatResultErrors::CODE_MAP['SUCCESS'], [
                'project_name' => $project_name,
                'subordinate' => $subordinate,
            ]);

        }else{
            $this->returnJson([
                'code' => FormatResultErrors::CODE_MAP['FIELD.INVALID']['code'],
                'message' => $v->getErrorList()->first()->getMessage(),
            ]);
        }
    }

    public function update()
    {

    }

    public function destory()
    {

    }
}