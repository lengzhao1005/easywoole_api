<?php
/**
 * Created by PhpStorm.
 * User: ThinkPad
 * Date: 2018/9/10
 * Time: 9:53
 */

namespace App\HttpController\Api;

use App\Utility\FormatResultErrors;
use Carbon\Carbon;
use EasySwoole\Core\Utility\Validate\Rule;
use EasySwoole\Core\Utility\Validate\Rules;

class SubProject extends Base
{
    /**
     * 实现index方法
     */
    public function index()
    {
        parent::index(); // TODO: Change the autogenerated stub
    }

    /**
     * 创建子项目
     */
    public function store()
    {
        //传输方式限制为post
        if(($verfy_result = $this->verificationMethod('POST')) !== true){
            $this->returnJson($verfy_result);
        }
        //验证规则
        $rule = new Rules();
        $rule->add('name','子项目名称不能为空')->withRule(Rule::REQUIRED)
            ->withRule(Rule::MIN_LEN,3)
            ->withRule(Rule::MAX_LEN,100);
        $rule->add('subordinate','项目所用状态不能为空')->withRule(Rule::REQUIRED)
            ->withRule(Rule::MIN_LEN,6)
            ->withRule(Rule::MAX_LEN,30);
        $rule->add('id_project','父项目不能为空')->withRule(Rule::REQUIRED);
        //验证
        $v = $this->validateParams($rule);

        if(!$v->hasError()){//验证success
            //查看项目是否存在
            $id_project = $this->request()->getRequestParam('id_project');
            $project = \App\Model\Project::find($id_project);
            if(empty($project)){
                return $this->returnJson(FormatResultErrors::CODE_MAP['PROJECT.NOTFOUND']);
            }

            $project_name = $this->request()->getRequestParam('name');
            $subordinate = $this->request()->getRequestParam('subordinate');
            if(!in_array($subordinate, \App\Model\SubProject::SUBORDINATE)){
                return $this->returnJson(FormatResultErrors::CODE_MAP['SUBORDINATE.INVALID']);
            }

            //创建子项目
            $time = Carbon::now()->toDateTimeString();
            $id_sub_project = \App\Model\SubProject::insertGetId([
                'name' => $project_name,
                'subordinate' => $subordinate,
                'id_project' => $id_project,
                'id_user_create' => $this->who->id_user,
                'create_time' => $time,
                'update_time' => $time
            ]);
            return $this->returnJson(FormatResultErrors::CODE_MAP['SUCCESS'], [
                'id_sub_project' => $id_sub_project,
            ]);

        }else{//验证失败
            $this->returnJson([
                'code' => FormatResultErrors::CODE_MAP['FIELD.INVALID']['code'],
                'message' => $v->getErrorList()->first()->getMessage(),
            ]);
        }
    }
}